AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  authfn

  Sample SAM Template for authfn
Parameters:
  DirectoryUrl:
    Type: String
    Description: URL for AD, ex ldap://1.2.3.4
  DirectoryDn:
    Type: String
    Description: Base DN for the AD forest ex DC=brehmcla,DC=amazon,DC=com
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to path to the directory
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets to bind to
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 5

Resources:
  TransferBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "transfer-${AWS::StackName}"
      VersioningConfiguration:
        Status: Enabled

  TransferServer:
    Type: AWS::Transfer::Server
    Properties:
      EndpointType: PUBLIC
      IdentityProviderDetails:
        InvocationRole: !GetAtt TransferIdentityProviderRole.Arn
        Url: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      IdentityProviderType: API_GATEWAY
      LoggingRole:
        Fn::GetAtt: CloudWatchLoggingRole.Arn
  CloudWatchLoggingRole:
    Description: IAM role used by Transfer  to log API requests to CloudWatch
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - transfer.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: TransferLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: '*'
  UserAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: transfer.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: s3-access-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::${TransferBucket}"
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:GetObjectVersion
            - s3:DeleteObjectVersion
            - s3:GetObjectACL
            - s3:PutObjectACL
            Resource:
              Fn::Sub: "arn:aws:s3:::${TransferBucket}/*"
              
  TransferIdentityProviderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: transfer.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: TransferCanInvokeThisApi
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource:
              Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessRestApi}/Prod/GET/*
      - PolicyName: TransferCanReadThisApi
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - apigateway:GET
            Resource: '*'

  AuthFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: transfer-auth-lambda-sg
      GroupDescription: SG for TransferAuth Lambda
      SecurityGroupEgress:
      - CidrIp: "0.0.0.0/0"
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
      VpcId: !Ref VPC
  AuthFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: auth-fn/
      Handler: index.handler
      Environment:
        Variables:
          AD_URL: !Ref DirectoryUrl
          AD_ROOT: !Ref DirectoryDn
          USER_ROLE: !GetAtt UserAccessRole.Arn
          S3_BUCKET_ARN: !GetAtt TransferBucket.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref AuthFunctionSecurityGroup
        SubnetIds: !Ref Subnets
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /servers/{serverId}/users/{username}/config
            Method: get
            RequestParameters:
              - method.request.header.Password
              - method.request.path.serverId
              - method.request.path.username
              - method.request.querystring.protocol
              - method.request.querystring.sourceIp